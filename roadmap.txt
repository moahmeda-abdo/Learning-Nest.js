> Source : https://www.youtube.com/playlist?list=PLOldSEMXUdZsFAEJwxYkE83dhm1ZkWEOL
> documentation is very very important : https://docs.nestjs.com/


> road map 
1-  Modules
        A module is a class annotated with a @Module() decorator. The @Module() decorator provides metadata that Nest makes use of to organize the application structure.

2-  controllers
        Controllers are responsible for handling incoming requests and returning responses to the client.

3- Services
        * returning data
        * Common Use Cases:
                - Interacting with databases
                - Making HTTP requests
                - Performing complex calculations
                - Implementing business rules

4- Middlewares
        Middleware is a function which is called before the route handler. Middleware functions have access to the request and response objects, and the next() middleware function in the applicationâ€™s request-response cycle. The next middleware function is commonly denoted by a variable named next.

5- Exception filters
        Nest comes with a built-in exceptions layer which is responsible for processing all unhandled exceptions across an application. When an exception is not handled by your application code, it is caught by this layer, which then automatically sends an appropriate user-friendly response.

6- Extract data from requests (body , params , query)

7- Pipes
        * Pipes have two typical use cases:
                - transformation: transform input data to the desired form (e.g., from string to integer)
                - validation: evaluate input data and if valid, simply pass it through unchanged; otherwise, throw an exception

8- class validator , scope pipes , DTO & ValidationPipes
        * There is a GitHub repository for class-validator that is highly informative and contains a wealth of methods and information.
        * https://github.com/typestack/class-validator 

        
9- Decorators

10- Guards 
        * Guards have a single responsibility. They determine whether a given request will be handled by the route handler or not, depending on certain conditions (like permissions, roles, ACLs, etc.) present at run-time. This is often referred to as authorization. Authorization (and its cousin, authentication, with which it usually collaborates) has typically been handled by middleware in traditional Express applications. Middleware is a fine choice for authentication, since things like token validation and attaching properties to the request object are not strongly connected with a particular route context (and its metadata).
        * But middleware, by its nature, is dumb. It doesn't know which handler will be executed after calling the next() function. On the other hand, Guards have access to the ExecutionContext instance, and thus know exactly what's going to be executed next. They're designed, much like exception filters, pipes, and interceptors, to let you interpose processing logic at exactly the right point in the request/response cycle, and to do so declaratively. This helps keep your code DRY and declarative.



